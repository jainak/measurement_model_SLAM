/* Auto-generated by genmsg_cpp for file /home/akshay/ros_workspace/sensor_model_ardrone/msg/Feature_msg.msg */
#ifndef SENSOR_MODEL_ARDRONE_MESSAGE_FEATURE_MSG_H
#define SENSOR_MODEL_ARDRONE_MESSAGE_FEATURE_MSG_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "sensor_model_ardrone/Feature_Keypoint.h"

namespace sensor_model_ardrone
{
template <class ContainerAllocator>
struct Feature_msg_ {
  typedef Feature_msg_<ContainerAllocator> Type;

  Feature_msg_()
  : header()
  , px(0.0)
  , py(0.0)
  , f()
  , posX(0.0)
  , posY(0.0)
  , posZ(0.0)
  {
  }

  Feature_msg_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , px(0.0)
  , py(0.0)
  , f(_alloc)
  , posX(0.0)
  , posY(0.0)
  , posZ(0.0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef double _px_type;
  double px;

  typedef double _py_type;
  double py;

  typedef  ::sensor_model_ardrone::Feature_Keypoint_<ContainerAllocator>  _f_type;
   ::sensor_model_ardrone::Feature_Keypoint_<ContainerAllocator>  f;

  typedef double _posX_type;
  double posX;

  typedef double _posY_type;
  double posY;

  typedef double _posZ_type;
  double posZ;


  typedef boost::shared_ptr< ::sensor_model_ardrone::Feature_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sensor_model_ardrone::Feature_msg_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Feature_msg
typedef  ::sensor_model_ardrone::Feature_msg_<std::allocator<void> > Feature_msg;

typedef boost::shared_ptr< ::sensor_model_ardrone::Feature_msg> Feature_msgPtr;
typedef boost::shared_ptr< ::sensor_model_ardrone::Feature_msg const> Feature_msgConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::sensor_model_ardrone::Feature_msg_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::sensor_model_ardrone::Feature_msg_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace sensor_model_ardrone

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::sensor_model_ardrone::Feature_msg_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::sensor_model_ardrone::Feature_msg_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::sensor_model_ardrone::Feature_msg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "140431f548ab202fcb69c43ce5985859";
  }

  static const char* value(const  ::sensor_model_ardrone::Feature_msg_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x140431f548ab202fULL;
  static const uint64_t static_value2 = 0xcb69c43ce5985859ULL;
};

template<class ContainerAllocator>
struct DataType< ::sensor_model_ardrone::Feature_msg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "sensor_model_ardrone/Feature_msg";
  }

  static const char* value(const  ::sensor_model_ardrone::Feature_msg_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::sensor_model_ardrone::Feature_msg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
\n\
float64 px\n\
float64 py\n\
\n\
Feature_Keypoint f\n\
\n\
float64 posX\n\
float64 posY\n\
float64 posZ\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: sensor_model_ardrone/Feature_Keypoint\n\
Header header\n\
\n\
float64 x\n\
float64 y\n\
\n\
float64 size\n\
float64 angle\n\
float64 response\n\
int32 octave\n\
int32 class_id\n\
\n\
\n\
";
  }

  static const char* value(const  ::sensor_model_ardrone::Feature_msg_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::sensor_model_ardrone::Feature_msg_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::sensor_model_ardrone::Feature_msg_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::sensor_model_ardrone::Feature_msg_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.px);
    stream.next(m.py);
    stream.next(m.f);
    stream.next(m.posX);
    stream.next(m.posY);
    stream.next(m.posZ);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Feature_msg_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sensor_model_ardrone::Feature_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::sensor_model_ardrone::Feature_msg_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "px: ";
    Printer<double>::stream(s, indent + "  ", v.px);
    s << indent << "py: ";
    Printer<double>::stream(s, indent + "  ", v.py);
    s << indent << "f: ";
s << std::endl;
    Printer< ::sensor_model_ardrone::Feature_Keypoint_<ContainerAllocator> >::stream(s, indent + "  ", v.f);
    s << indent << "posX: ";
    Printer<double>::stream(s, indent + "  ", v.posX);
    s << indent << "posY: ";
    Printer<double>::stream(s, indent + "  ", v.posY);
    s << indent << "posZ: ";
    Printer<double>::stream(s, indent + "  ", v.posZ);
  }
};


} // namespace message_operations
} // namespace ros

#endif // SENSOR_MODEL_ARDRONE_MESSAGE_FEATURE_MSG_H

